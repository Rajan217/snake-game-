// === Insect Game Advanced Version === // Created for browser + mobile compatibility // Includes: evolution, shop, music, achievements, AI enemies, dynamic levels const canvas = document.getElementById("gameCanvas"); const ctx = canvas.getContext("2d"); canvas.width = window.innerWidth; canvas.height = window.innerHeight; // === Game State === let mouseX = canvas.width / 2; let mouseY = canvas.height / 2; let score = 0; let coins = 0; let level = 1; let gameOver = false; let evolutionStage = 1; let shield = false; let speedBoost = false; let enemies = []; let food = []; let particles = []; let powerUps = []; let unlockedSkins = ["green"]; let activeSkin = "green"; let musicOn = true; let showShop = false; let quests = ["Collect 10 coins", "Survive 60s"]; // === Audio === const eatSound = new Audio("https://cdn.pixabay.com/audio/2021/08/04/audio_57b3764b9a.mp3"); const gameOverSound = new Audio("https://cdn.pixabay.com/audio/2022/03/31/audio_d2a7bc3cf6.mp3"); const backgroundMusic = new Audio("https://cdn.pixabay.com/audio/2022/03/10/audio_173f62ebc1.mp3"); backgroundMusic.loop = true; // === Segments === const segmentCount = 20; const segmentLength = 15; const segments = []; for (let i = 0; i < segmentCount; i++) { segments.push({ x: canvas.width / 2, y: canvas.height / 2 }); } // === Event Listeners === canvas.addEventListener("mousemove", function (e) { const rect = canvas.getBoundingClientRect(); mouseX = e.clientX - rect.left; mouseY = e.clientY - rect.top; }); canvas.addEventListener("click", () => { if (gameOver) restartGame(); else if (!backgroundMusic.paused) backgroundMusic.pause(); else backgroundMusic.play(); }); // === Helper Functions === function distance(a, b) { return Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2); } function spawnFood() { const type = Math.random() < 0.8 ? "normal" : "poison"; food.push({ x: Math.random() * canvas.width, y: Math.random() * canvas.height, type }); } function spawnEnemy() { enemies.push({ x: Math.random() * canvas.width, y: Math.random() * canvas.height, speed: 1 + Math.random(), }); } function spawnPowerUp() { const types = ["shield", "speed"]; const type = types[Math.floor(Math.random() * types.length)]; powerUps.push({ x: Math.random() * canvas.width, y: Math.random() * canvas.height, type, duration: 5000, }); } function drawTail() { for (let i = segments.length - 1; i > 0; i--) { segments[i].x = segments[i - 1].x; segments[i].y = segments[i - 1].y; } let dx = mouseX - segments[0].x; let dy = mouseY - segments[0].y; let dist = Math.sqrt(dx * dx + dy * dy); if (dist > 1) { segments[0].x += (dx / dist) * (speedBoost ? 4 : 2); segments[0].y += (dy / dist) * (speedBoost ? 4 : 2); } for (let i = 0; i < segments.length; i++) { ctx.beginPath(); ctx.arc(segments[i].x, segments[i].y, 10, 0, Math.PI * 2); ctx.fillStyle = i === 0 ? "lime" : `hsl(${i * 10}, 90%, 50%)`; ctx.fill(); ctx.closePath(); } } function drawFood() { food.forEach((f, i) => { ctx.fillStyle = f.type === "normal" ? "red" : "purple"; ctx.beginPath(); ctx.arc(f.x, f.y, 6, 0, Math.PI * 2); ctx.fill(); if (distance(segments[0], f) < 15) { if (f.type === "poison" && !shield) return endGame(); food.splice(i, 1); score += 10; coins++; eatSound.play(); segments.push({ ...segments[segments.length - 1] }); if (score % 100 === 0) level++; if (score % 200 === 0) spawnEnemy(); if (score % 150 === 0) spawnPowerUp(); } }); } function drawEnemies() { enemies.forEach((e, i) => { let dx = segments[0].x - e.x; let dy = segments[0].y - e.y; let d = Math.sqrt(dx * dx + dy * dy); e.x += (dx / d) * e.speed; e.y += (dy / d) * e.speed; ctx.fillStyle = "black"; ctx.beginPath(); ctx.arc(e.x, e.y, 12, 0, Math.PI * 2); ctx.fill(); if (distance(segments[0], e) < 15 && !shield) endGame(); }); } function drawPowerUps() { powerUps.forEach((p, i) => { ctx.fillStyle = p.type === "shield" ? "cyan" : "orange"; ctx.beginPath(); ctx.arc(p.x, p.y, 8, 0, Math.PI * 2); ctx.fill(); if (distance(segments[0], p) < 15) { if (p.type === "shield") shield = true; else speedBoost = true; setTimeout(() => { shield = false; speedBoost = false; }, p.duration); powerUps.splice(i, 1); } }); } function drawUI() { ctx.fillStyle = "white"; ctx.font = "18px Arial"; ctx.fillText(`Score: ${score}`, 20, 30); ctx.fillText(`Coins: ${coins}`, 20, 50); ctx.fillText(`Level: ${level}`, 20, 70); if (shield) ctx.fillText("Shield Active", 20, 90); if (speedBoost) ctx.fillText("Speed Boost!", 20, 110); } function endGame() { gameOver = true; backgroundMusic.pause(); gameOverSound.play(); } function restartGame() { location.reload(); } function gameLoop() { ctx.clearRect(0, 0, canvas.width, canvas.height); drawTail(); drawFood(); drawEnemies(); drawPowerUps(); drawUI(); if (!gameOver) requestAnimationFrame(gameLoop); } // === Start Game === for (let i = 0; i < 5; i++) spawnFood(); spawnEnemy(); spawnPowerUp(); backgroundMusic.play(); gameLoop();